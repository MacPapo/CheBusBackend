# frozen_string_literal: true

# Registers the `:logger` provider within the Application container.
# This provider is responsible for setting up and managing the application's logging system.

Application.register_provider(:logger) do
  # Prepares the logger provider by requiring necessary dependencies.
  # This method is invoked before the provider is started.
  prepare do
    require 'logger' # Requires the Logger class from the Ruby standard library.
  end

  # Starts the logger provider. This method is invoked during the application
  # initialization process and is responsible for configuring the logger.
  start do
    # Creates a new instance of Logger that outputs to the standard output ($stdout).
    # This logger will capture and display log messages generated by the application.
    logger = Logger.new($stdout)

    # Sets the log level of the Logger to WARN for the test environment.
    # In this configuration, only warnings, errors, and fatal messages will be logged.
    # This is done to minimize log output during tests for clarity and performance.
    logger.level = Logger::WARN if Application.env == 'test'

    # Registers the configured logger instance within the application container.
    # This makes the logger globally accessible throughout the application.
    register(:logger, logger)
  end
end
